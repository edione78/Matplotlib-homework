{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import numpy as np\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata = \"data/Mouse_metadata.csv\"\n",
    "study_results = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata)\n",
    "study_results = pd.read_csv(study_results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s185</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>x401</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>m601</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Male</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>g791</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen     Sex  Age_months  Weight (g)\n",
       "0     k403     Ramicane    Male          21          16\n",
       "1     s185    Capomulin  Female           3          17\n",
       "2     x401    Capomulin  Female          16          15\n",
       "3     m601    Capomulin    Male          22          17\n",
       "4     g791     Ramicane    Male          11          16"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mouse_metadata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "unique_mice = mouse_metadata[\"Mouse ID\"]\n",
    "mouse_metadata[\"Mouse ID\"].unique\n",
    "len(unique_mice)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>r944</td>\n",
       "      <td>45</td>\n",
       "      <td>41.581521</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>u364</td>\n",
       "      <td>45</td>\n",
       "      <td>31.023923</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>p438</td>\n",
       "      <td>45</td>\n",
       "      <td>61.433892</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>x773</td>\n",
       "      <td>45</td>\n",
       "      <td>58.634971</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>b879</td>\n",
       "      <td>45</td>\n",
       "      <td>72.555239</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1888 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  is duplicated\n",
       "0        b128          0           45.000000                 0          False\n",
       "1        f932          0           45.000000                 0          False\n",
       "2        g107          0           45.000000                 0          False\n",
       "3        a457          0           45.000000                 0          False\n",
       "4        c819          0           45.000000                 0          False\n",
       "...       ...        ...                 ...               ...            ...\n",
       "1888     r944         45           41.581521                 2          False\n",
       "1889     u364         45           31.023923                 3          False\n",
       "1890     p438         45           61.433892                 1          False\n",
       "1891     x773         45           58.634971                 4          False\n",
       "1892     b879         45           72.555239                 2          False\n",
       "\n",
       "[1888 rows x 5 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "gp = study_results.groupby([\"Mouse ID\"])\n",
    "study_results.groupby([\"Mouse ID\"])\n",
    "gp.count()\n",
    "study_results[\"is duplicated\"] = study_results.duplicated(subset=['Mouse ID', 'Timepoint'])\n",
    "study_results[study_results[\"is duplicated\"] == False]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>137</th>\n",
       "      <td>g989</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>g989</td>\n",
       "      <td>5</td>\n",
       "      <td>47.570392</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>g989</td>\n",
       "      <td>10</td>\n",
       "      <td>49.880528</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>g989</td>\n",
       "      <td>15</td>\n",
       "      <td>53.442020</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1111</th>\n",
       "      <td>g989</td>\n",
       "      <td>20</td>\n",
       "      <td>54.657650</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  is duplicated\n",
       "137      g989          0           45.000000                 0           True\n",
       "360      g989          5           47.570392                 0           True\n",
       "681      g989         10           49.880528                 0           True\n",
       "869      g989         15           53.442020                 0           True\n",
       "1111     g989         20           54.657650                 1           True"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID.\n",
    "study_results[study_results[\"is duplicated\"] == True]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>r944</td>\n",
       "      <td>45</td>\n",
       "      <td>41.581521</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>u364</td>\n",
       "      <td>45</td>\n",
       "      <td>31.023923</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>p438</td>\n",
       "      <td>45</td>\n",
       "      <td>61.433892</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>x773</td>\n",
       "      <td>45</td>\n",
       "      <td>58.634971</td>\n",
       "      <td>4</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>b879</td>\n",
       "      <td>45</td>\n",
       "      <td>72.555239</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1888 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  is duplicated\n",
       "0        b128          0           45.000000                 0          False\n",
       "1        f932          0           45.000000                 0          False\n",
       "2        g107          0           45.000000                 0          False\n",
       "3        a457          0           45.000000                 0          False\n",
       "4        c819          0           45.000000                 0          False\n",
       "...       ...        ...                 ...               ...            ...\n",
       "1888     r944         45           41.581521                 2          False\n",
       "1889     u364         45           31.023923                 3          False\n",
       "1890     p438         45           61.433892                 1          False\n",
       "1891     x773         45           58.634971                 4          False\n",
       "1892     b879         45           72.555239                 2          False\n",
       "\n",
       "[1888 rows x 5 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n",
    "df_clean_study_results = study_results[study_results[\"is duplicated\"] == False]\n",
    "df_clean_study_results\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "unique_mice = df_clean_study_results[\"Mouse ID\"].unique()\n",
    "len(unique_mice)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>Standard Deviation</th>\n",
       "      <th>SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.393463</td>\n",
       "      <td>50.909965</td>\n",
       "      <td>43.138803</td>\n",
       "      <td>6.568014</td>\n",
       "      <td>0.525862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Mean     Median   Variance  Standard Deviation       SEM\n",
       "Drug Regimen                                                               \n",
       "Capomulin     40.675741  41.557809  24.947764            4.994774  0.329346\n",
       "Ceftamin      52.591172  51.776157  39.290177            6.268188  0.469821\n",
       "Infubinol     52.884795  51.820584  43.128684            6.567243  0.492236\n",
       "Ketapril      55.235638  53.698743  68.553577            8.279709  0.603860\n",
       "Naftisol      54.331565  52.509285  66.173479            8.134708  0.596466\n",
       "Placebo       54.033581  52.288934  61.168083            7.821003  0.581331\n",
       "Propriva      52.393463  50.909965  43.138803            6.568014  0.525862\n",
       "Ramicane      40.216745  40.673236  23.486704            4.846308  0.320955\n",
       "Stelasyn      54.233149  52.431737  59.450562            7.710419  0.573111\n",
       "Zoniferol     53.236507  51.818479  48.533355            6.966589  0.516398"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# This method is the most straighforward, creating multiple series and putting them all together at the end.\n",
    "merge_table = df_clean_study_results.merge(mouse_metadata, on = 'Mouse ID', how = 'inner')\n",
    "mean = merge_table.groupby('Drug Regimen')['Tumor Volume (mm3)'].mean()\n",
    "median = merge_table.groupby('Drug Regimen')['Tumor Volume (mm3)'].median()\n",
    "variance = merge_table.groupby('Drug Regimen')['Tumor Volume (mm3)'].var()\n",
    "stdv = merge_table.groupby('Drug Regimen')['Tumor Volume (mm3)'].std()\n",
    "sem = merge_table.groupby('Drug Regimen')['Tumor Volume (mm3)'].sem()\n",
    "summary_df = pd.DataFrame({\"Mean\": mean, \"Median\": median, \"Variance\": variance, \"Standard Deviation\": stdv, \n",
    "                          \"SEM\": sem})\n",
    "summary_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pandas. \n",
    "grouped_df = pd.DataFrame(merge_table.groupby([\"Drug Regimen\"]).count()).reset_index()\n",
    "# Filter the DataFrame down only to those columns to chart\n",
    "regimen_datapoints = grouped_df[[\"Drug Regimen\",\"Mouse ID\"]]\n",
    "regimen_datapoints = regimen_datapoints.rename(columns={\"Mouse ID\": \"Count\"})\n",
    "# Set the index to be \"Drug Regimen\" so they will be used as labels\n",
    "regimen_datapoints = regimen_datapoints.set_index(\"Drug Regimen\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use DataFrame.plot() in order to create a bar chart of the data\n",
    "regimen_datapoints.plot(kind=\"bar\", figsize=(10,3))\n",
    "\n",
    "# Set a title for the chart\n",
    "plt.title(\"Count per Drug Regimen\")\n",
    "\n",
    "plt.show()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Mouse ID  Drug Regimen  Age_months  Weight (g)  Timepoint  \\\n",
       "0  Female       935           935         935         935        935   \n",
       "1    Male       958           958         958         958        958   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0                 935               935  \n",
       "1                 958               958  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pyplot.\n",
    "gender_df = pd.DataFrame(merge_table.groupby([\"Sex\"]).count()).reset_index()\n",
    "gender_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Capomulin',\n",
       " 'Ceftamin',\n",
       " 'Infubinol',\n",
       " 'Ketapril',\n",
       " 'Naftisol',\n",
       " 'Placebo',\n",
       " 'Propriva',\n",
       " 'Ramicane',\n",
       " 'Stelasyn',\n",
       " 'Zoniferol']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate a bar plot showing number of data points for each treatment regimen using pyplot\n",
    "# select column to convert to list here\n",
    "drug_regimens = summary_df.index.tolist()\n",
    "drug_regimens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[230, 178, 178, 188, 186, 181, 161, 228, 181, 182]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert regimen count into a list\n",
    "regimen_count = (merge_table.groupby([\"Drug Regimen\"])[\"Age_months\"].count()).tolist()\n",
    "regimen_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_axis = np.arange(len(regimen_count))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 10 artists>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define x-axis\n",
    "x_axis = drug_regimens\n",
    "# Create a bar chart based upon the above data\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.bar(x_axis, regimen_count, color='b', alpha=0.5, align=\"center\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "      <td>935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "      <td>958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Mouse ID  Drug Regimen  Age_months  Weight (g)  Timepoint  \\\n",
       "0  Female       935           935         935         935        935   \n",
       "1    Male       958           958         958         958        958   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0                 935               935  \n",
       "1                 958               958  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "gender_df = pd.DataFrame(merge_table.groupby([\"Sex\"]).count()).reset_index()\n",
    "gender_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Count\n",
       "0  Female    935\n",
       "1    Male    958"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "gender_df = gender_df[[\"Sex\",\"Mouse ID\"]]\n",
    "gender_df = gender_df.rename(columns={\"Mouse ID\": \"Count\"})\n",
    "gender_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2b975b5bcc8>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "fig, ax1 = plt.subplots()\n",
    "# plt.figure(figsize=(10,6))\n",
    "# ax1 = plt.subplot(121, aspect='equal')\n",
    "gender_df.plot(kind='pie', y = \"Count\", ax=ax1, autopct='%1.1f%%', \n",
    " startangle=90, shadow=False, labels=gender_df['Sex'], legend = False, fontsize=16)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.clf()\n",
    "plt.cla()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[930, 958]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "# Convert Columns into lists\n",
    "gender_count = (merge_table.groupby([\"Sex\"])[\"Age_months\"].count()).tolist()\n",
    "gender_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x2b975be02c8>,\n",
       "  <matplotlib.patches.Wedge at 0x2b975be64c8>],\n",
       " [Text(-0.7265028750894215, -0.8259501029038041, 'Females'),\n",
       "  Text(0.7265029524204479, 0.8259500348836922, 'Males')],\n",
       " [Text(-0.3962742955033208, -0.45051823794752943, '49.3%'),\n",
       "  Text(0.39627433768388065, 0.4505182008456502, '50.7%')])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creates the pie chart based upon the values above\n",
    "# Automatically finds the percentages of each part of the pie chart\n",
    "plt.pie(gender_count, labels=labels, colors=colors,\n",
    "        autopct=\"%1.1f%%\", shadow=True, startangle=140)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = [\"Females\", \"Males\"]\n",
    "\n",
    "# The colors of each section of the pie chart\n",
    "colors = [\"pink\", \"blue\"]\n",
    "\n",
    "# Tells matplotlib to seperate the \"Python\" section from the others\n",
    "explode = (0.1, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens: \n",
    "#study_results[study_results[\"is duplicated\"] == False]\n",
    "#merge_table[merge_table[\"Drug Regimen\"] == \"Capomulin\"]\n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "Capomulin = merge_table[merge_table[\"Drug Regimen\"] == \"Capomulin\"]\n",
    "Ramicane = merge_table[merge_table[\"Drug Regimen\"] == \"Ramicane\"]\n",
    "Infubinol = merge_table[merge_table[\"Drug Regimen\"] == \"Infubinol\"]\n",
    "Ceftamin = merge_table[merge_table[\"Drug Regimen\"] == \"Ceftamin\"]\n",
    "Capomulin\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "data = [Capomulin[\"Tumor Volume (mm3)\"], Ramicane[\"Tumor Volume (mm3)\"],Infubinol[\"Tumor Volume (mm3)\"],Ceftamin[\"Tumor Volume (mm3)\"]]\n",
    "fig, ax = plt.subplots()\n",
    "ax.set_title('Title')\n",
    "ax.boxplot(data, labels = [\"Capomulin\",\"Ramicane\",\"Infubinol\",\"Ceftamin\"])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>b128</td>\n",
       "      <td>5</td>\n",
       "      <td>45.651331</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>b128</td>\n",
       "      <td>10</td>\n",
       "      <td>43.270852</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>b128</td>\n",
       "      <td>15</td>\n",
       "      <td>43.784893</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>b128</td>\n",
       "      <td>20</td>\n",
       "      <td>42.731552</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  \\\n",
       "0      0     b128          0           45.000000                 0   \n",
       "1      1     b128          5           45.651331                 0   \n",
       "2      2     b128         10           43.270852                 0   \n",
       "3      3     b128         15           43.784893                 0   \n",
       "4      4     b128         20           42.731552                 0   \n",
       "\n",
       "   is duplicated Drug Regimen     Sex  Age_months  Weight (g)  \n",
       "0          False    Capomulin  Female           9          22  \n",
       "1          False    Capomulin  Female           9          22  \n",
       "2          False    Capomulin  Female           9          22  \n",
       "3          False    Capomulin  Female           9          22  \n",
       "4          False    Capomulin  Female           9          22  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Generate a line plot of time point versus tumor volume for a single mouse treated with Capomulin.\n",
    "# Create a new DataFrame that looks into Capomulin\n",
    "capomulin_df = merge_table.loc[merge_table[\"Drug Regimen\"] == \"Capomulin\"]\n",
    "capomulin_df = capomulin_df.reset_index()\n",
    "capomulin_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1686</td>\n",
       "      <td>s185</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1687</td>\n",
       "      <td>s185</td>\n",
       "      <td>5</td>\n",
       "      <td>43.878496</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1688</td>\n",
       "      <td>s185</td>\n",
       "      <td>10</td>\n",
       "      <td>37.614948</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1689</td>\n",
       "      <td>s185</td>\n",
       "      <td>15</td>\n",
       "      <td>38.177232</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1690</td>\n",
       "      <td>s185</td>\n",
       "      <td>20</td>\n",
       "      <td>36.866876</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1691</td>\n",
       "      <td>s185</td>\n",
       "      <td>25</td>\n",
       "      <td>33.949940</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1692</td>\n",
       "      <td>s185</td>\n",
       "      <td>30</td>\n",
       "      <td>32.959671</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1693</td>\n",
       "      <td>s185</td>\n",
       "      <td>35</td>\n",
       "      <td>28.328531</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1694</td>\n",
       "      <td>s185</td>\n",
       "      <td>40</td>\n",
       "      <td>25.472143</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1695</td>\n",
       "      <td>s185</td>\n",
       "      <td>45</td>\n",
       "      <td>23.343598</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  \\\n",
       "28   1686     s185          0           45.000000                 0   \n",
       "29   1687     s185          5           43.878496                 0   \n",
       "30   1688     s185         10           37.614948                 0   \n",
       "31   1689     s185         15           38.177232                 0   \n",
       "32   1690     s185         20           36.866876                 0   \n",
       "33   1691     s185         25           33.949940                 0   \n",
       "34   1692     s185         30           32.959671                 1   \n",
       "35   1693     s185         35           28.328531                 1   \n",
       "36   1694     s185         40           25.472143                 1   \n",
       "37   1695     s185         45           23.343598                 1   \n",
       "\n",
       "    is duplicated Drug Regimen     Sex  Age_months  Weight (g)  \n",
       "28          False    Capomulin  Female           3          17  \n",
       "29          False    Capomulin  Female           3          17  \n",
       "30          False    Capomulin  Female           3          17  \n",
       "31          False    Capomulin  Female           3          17  \n",
       "32          False    Capomulin  Female           3          17  \n",
       "33          False    Capomulin  Female           3          17  \n",
       "34          False    Capomulin  Female           3          17  \n",
       "35          False    Capomulin  Female           3          17  \n",
       "36          False    Capomulin  Female           3          17  \n",
       "37          False    Capomulin  Female           3          17  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select data of a single mouse\n",
    "cap_single_df = capomulin_df.loc[capomulin_df[\"Mouse ID\"] == \"s185\"]\n",
    "cap_single_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2b975441cc8>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Selecting only 2 columns\n",
    "cap_single_df = cap_single_df.loc[:, [\"Timepoint\", \"Tumor Volume (mm3)\"]]\n",
    "#capomulin_df.index\n",
    "#Reset the index\n",
    "cap_single_df = cap_single_df.reset_index(drop=True)\n",
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n",
    "cap_single_df.set_index('Timepoint').plot(figsize=(10, 8), linewidth=2.5, color='green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>is duplicated</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>b128</td>\n",
       "      <td>5</td>\n",
       "      <td>45.651331</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>b128</td>\n",
       "      <td>10</td>\n",
       "      <td>43.270852</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>b128</td>\n",
       "      <td>15</td>\n",
       "      <td>43.784893</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>b128</td>\n",
       "      <td>20</td>\n",
       "      <td>42.731552</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites  \\\n",
       "0      0     b128          0           45.000000                 0   \n",
       "1      1     b128          5           45.651331                 0   \n",
       "2      2     b128         10           43.270852                 0   \n",
       "3      3     b128         15           43.784893                 0   \n",
       "4      4     b128         20           42.731552                 0   \n",
       "\n",
       "   is duplicated Drug Regimen     Sex  Age_months  Weight (g)  \n",
       "0          False    Capomulin  Female           9          22  \n",
       "1          False    Capomulin  Female           9          22  \n",
       "2          False    Capomulin  Female           9          22  \n",
       "3          False    Capomulin  Female           9          22  \n",
       "4          False    Capomulin  Female           9          22  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "capomulin_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>45.651331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>43.270852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>43.784893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>42.731552</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Weight (g)  Tumor Volume (mm3)\n",
       "0     b128          22           45.000000\n",
       "1     b128          22           45.651331\n",
       "2     b128          22           43.270852\n",
       "3     b128          22           43.784893\n",
       "4     b128          22           42.731552"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduced_df = capomulin_df.loc[:, [\"Mouse ID\", \"Weight (g)\", \"Tumor Volume (mm3)\"]]\n",
    "reduced_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>22</td>\n",
       "      <td>41.963636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b742</td>\n",
       "      <td>21</td>\n",
       "      <td>40.083699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>f966</td>\n",
       "      <td>17</td>\n",
       "      <td>36.505973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>g288</td>\n",
       "      <td>19</td>\n",
       "      <td>41.990097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>g316</td>\n",
       "      <td>22</td>\n",
       "      <td>44.613344</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Weight (g)  Tumor Volume (mm3)\n",
       "0     b128          22           41.963636\n",
       "1     b742          21           40.083699\n",
       "2     f966          17           36.505973\n",
       "3     g288          19           41.990097\n",
       "4     g316          22           44.613344"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "average_cap = pd.DataFrame(reduced_df.groupby([\"Mouse ID\", \"Weight (g)\"])[\"Tumor Volume (mm3)\"].mean()).reset_index()\n",
    "average_cap.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Average Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b128</th>\n",
       "      <td>22</td>\n",
       "      <td>41.963636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b742</th>\n",
       "      <td>21</td>\n",
       "      <td>40.083699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f966</th>\n",
       "      <td>17</td>\n",
       "      <td>36.505973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g288</th>\n",
       "      <td>19</td>\n",
       "      <td>41.990097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g316</th>\n",
       "      <td>22</td>\n",
       "      <td>44.613344</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Weight (g)  Average Volume\n",
       "Mouse ID                            \n",
       "b128              22       41.963636\n",
       "b742              21       40.083699\n",
       "f966              17       36.505973\n",
       "g288              19       41.990097\n",
       "g316              22       44.613344"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rename Tumor Volume column\n",
    "average_cap = average_cap.rename(columns={\"Tumor Volume (mm3)\": \"Average Volume\"})\n",
    "average_cap.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "average_cap.plot(kind=\"scatter\", x=\"Weight (g)\", y=\"Average Volume\", grid=True, figsize=(4,4),\n",
    "              title=\"Weight Vs. Average Tumor Volume\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.clf()\n",
    "plt.cla()\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation between both factors is 0.84\n"
     ]
    }
   ],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "import matplotlib.pyplot as plt\n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n",
    "mouse_weight = average_cap.iloc[:,0]\n",
    "avg_tumor_volume = average_cap.iloc[:,1]\n",
    "correlation = st.pearsonr(mouse_weight,avg_tumor_volume)\n",
    "print(f\"The correlation between both factors is {round(correlation[0],2)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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kfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH4gsAoCPxBQDQkfgCAOhIfAEAdCS+AAA6El8AAB2JLwCAjsQXAEBH/x8DrkFiPNi6UwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Add the linear regression equation and line to plot\n",
    "x_values = average_cap['Weight (g)']\n",
    "y_values = average_cap['Average Volume']\n",
    "(slope, intercept, rvalue, pvalue, stderr) = st.linregress(x_values, y_values)\n",
    "regress_values = x_values * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "plt.scatter(x_values,y_values)\n",
    "plt.plot(x_values,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(6,10),fontsize=15,color=\"red\")\n",
    "plt.xlabel('Mouse Weight')\n",
    "plt.ylabel('Average Tumor Volume')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
